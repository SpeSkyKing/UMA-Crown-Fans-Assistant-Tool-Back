# Generated by Django 4.2.5 on 2025-08-25 02:30

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserPersonal',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'user_table',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Live',
            fields=[
                ('live_id', models.AutoField(primary_key=True, serialize=False)),
                ('live_name', models.CharField(max_length=255)),
                ('composer', models.CharField(max_length=255, blank=True, null=True)),
                ('arranger', models.CharField(max_length=255, blank=True, null=True)),
            ],
            options={
                'db_table': 'live_table',
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('race_id', models.AutoField(primary_key=True, serialize=False)),
                ('race_name', models.CharField(max_length=255)),
                ('race_state', models.IntegerField()),
                ('distance', models.IntegerField()),
                ('distance_detail', models.SmallIntegerField(blank=True, null=True)),
                ('num_fans', models.IntegerField(blank=True, null=True)),
                ('race_months', models.IntegerField()),
                ('half_flag', models.IntegerField()),
                ('race_rank', models.IntegerField()),
                ('junior_flag', models.IntegerField()),
                ('classic_flag', models.IntegerField()),
                ('senior_flag', models.IntegerField()),
                ('scenario_flag', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'race_table',
            },
        ),
        migrations.CreateModel(
            name='Umamusume',
            fields=[
                ('umamusume_id', models.AutoField(primary_key=True, serialize=False)),
                ('umamusume_name', models.CharField(max_length=255)),
                ('turf_aptitude', models.CharField(max_length=1)),
                ('dirt_aptitude', models.CharField(max_length=1)),
                ('front_runner_aptitude', models.CharField(max_length=1, blank=True, null=True)),
                ('early_foot_aptitude', models.CharField(max_length=1, blank=True, null=True)),
                ('midfield_aptitude', models.CharField(max_length=1, blank=True, null=True)),
                ('closer_aptitude', models.CharField(max_length=1, blank=True, null=True)),
                ('sprint_aptitude', models.CharField(max_length=1)),
                ('mile_aptitude', models.CharField(max_length=1)),
                ('classic_aptitude', models.CharField(max_length=1)),
                ('long_distance_aptitude', models.CharField(max_length=1)),
            ],
            options={
                'db_table': 'umamusume_table',
            },
        ),
        migrations.CreateModel(
            name='VocalUmamusume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('live', models.ForeignKey(db_column='live_id', on_delete=django.db.models.deletion.CASCADE, to='uma_api.live')),
                ('umamusume', models.ForeignKey(db_column='umamusume_id', on_delete=django.db.models.deletion.CASCADE, to='uma_api.umamusume')),
            ],
            options={
                'db_table': 'vocal_umamusume_table',
            },
        ),
        migrations.CreateModel(
            name='UmamusumeActer',
            fields=[
                ('acter_id', models.AutoField(primary_key=True, serialize=False)),
                ('acter_name', models.CharField(max_length=255)),
                ('gender', models.CharField(max_length=10, blank=True, null=True)),
                ('nickname', models.CharField(max_length=255, blank=True, null=True)),
                ('birthday', models.DateField()),
                ('umamusume', models.OneToOneField(db_column='umamusume_id', on_delete=django.db.models.deletion.CASCADE, to='uma_api.umamusume')),
            ],
            options={
                'db_table': 'umamusume_acter_table',
            },
        ),
        migrations.CreateModel(
            name='ScenarioRace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('race_number', models.IntegerField()),
                ('random_group', models.IntegerField(blank=True, null=True)),
                ('senior_flag', models.IntegerField(blank=True, null=True)),
                ('race', models.ForeignKey(db_column='race_id', on_delete=django.db.models.deletion.CASCADE, to='uma_api.race')),
                ('umamusume', models.ForeignKey(db_column='umamusume_id', on_delete=django.db.models.deletion.CASCADE, to='uma_api.umamusume')),
            ],
            options={
                'db_table': 'scenario_race_table',
                'unique_together': {('umamusume', 'race', 'race_number')},
            },
        ),
        migrations.CreateModel(
            name='RegistUmamusumeRace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regist_date', models.DateTimeField()),
                ('race', models.ForeignKey(db_column='race_id', on_delete=django.db.models.deletion.CASCADE, to='uma_api.race')),
                ('umamusume', models.ForeignKey(db_column='umamusume_id', on_delete=django.db.models.deletion.CASCADE, to='uma_api.umamusume')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'regist_umamusume_race_table',
                'unique_together': {('user', 'umamusume', 'race')},
            },
        ),
        migrations.CreateModel(
            name='RegistUmamusume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regist_date', models.DateTimeField()),
                ('fans', models.BigIntegerField()),
                ('umamusume', models.ForeignKey(db_column='umamusume_id', on_delete=django.db.models.deletion.CASCADE, to='uma_api.umamusume')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'regist_umamusume_table',
                'unique_together': {('user', 'umamusume')},
            },
        ),
        migrations.CreateModel(
            name='Jewel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('month', models.IntegerField()),
                ('day', models.IntegerField()),
                ('jewel_amount', models.IntegerField()),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_jewel_table',
                'unique_together': {('user', 'year', 'month', 'day')},
            },
        ),
    ]
